# coding: utf-8
from PySide import QtCore
import threading

# ---------------------------------------------------------------------------------------------------------------------
class Interface(QtCore.QObject):
    start = QtCore.Signal(str)  # Issued at the beginning of the thread processing the Job.
    end = QtCore.Signal(str)  # issued at the end of the thread processing the Job.
    error = QtCore.Signal(str)  # issued when an exception was raised in the Job processing thread.

# ---------------------------------------------------------------------------------------------------------------------
class Job(threading.Thread):
    """
     The interface makes processing occurs outside the main thread and allows you
    to return the reply by issuing the event generated by the signal.
    """
    def __init__(self, signal):
        super(Job, self).__init__()
        self.signal = signal

    def run(self, text):
        try:
            self.signal.start.emit('')
        except:
            self.signal.error.emit('')
        finally:
            self.signal.end.emit('')
